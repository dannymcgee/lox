import * as Path from 'path';
import * as FS from 'fs-extra';

export class AstGenerator {
	static main(...args: string[]): void {
		if (args.length > 1) {
			console.log('Usage: generate <output directory>');
			process.exit(64);
		}
		let outputDir = args[0] ?? 'packages/ts/src/lib/types';

		// prettier-ignore
		this.defineAst(outputDir, 'Expr', [
			`Binary   | left: Expr, operator: Token, right: Expr`,
			`Grouping | expression: Expr`,
			`Literal  | value: any`,
			`Unary    | operator: Token, right: Expr`
		]);
	}

	private static defineAst(
		outputDir: string,
		baseName: string,
		types: string[],
	): void {
		let path = Path.resolve(
			process.cwd(),
			outputDir,
			`${camelToKebabCase(baseName)}.ts`,
		);
		let fileContent = [
			`// NOTE: This file is automatically generated!`,
			`// See packages/tools/src/lib/generate-ast.ts`,
			``,
			`import { Token } from './token'`,
			``,
			`export abstract class ${baseName} {}`,
			``,
			``,
		].join('\n');

		// prettier-ignore
		fileContent += types.reduce((accum, type) => {
			let [className, fld] = type.split('|').map((str) => str.trim());
			let fields = fld
				.split(',').map((str) => str.trim())
				.map((field) => field
					.split(':').map((str) => str.trim()));

			return accum + [
				`export class ${className} extends ${baseName} {`,
				fields.map(([name, type]) =>
					`\treadonly ${name}: ${type};`).join('\n'),
				``,
				`\tconstructor(${
						fields.map(([name, type]) =>
							`${name}: ${type}`).join(', ')
					}) {`,
				`\t\tsuper();`,
				fields.map(([name]) =>
					`\t\tthis.${name} = ${name};`).join('\n'),
				`\t}`,
				`}`
			].join('\n') + '\n\n';
		}, '');

		FS.writeFileSync(path, fileContent);
	}
}

function camelToKebabCase(text: string): string {
	return text.replace(/([a-z])([A-Z0-9])/g, '$1-$2').toLowerCase();
}
