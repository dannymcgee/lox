// declaration
class Breakfast {
	cook() {
		print "Eggs a-fryin'!";
	}
	serve(who) {
		print "Enjoy your breakfast, " + who + ".";
	}
}

// first-class status
fn printClass(klass) {
	print klass;
}

var myClass = Breakfast;
printClass(Breakfast);

// constructed by invoking the class
var breakfast = Breakfast();
print breakfast;

// assignment / access
breakfast.meat = "sausage";
breakfast.bread = "sourdough";

// initialization
class Breakfast {
	init (meat, bread) {
		this.meat = meat;
		this.bread = bread;
	}
	serve(who) {
		// TODO: string interpolation?
		// print $"Enjoy your {this.meat} and {this.bread}, {who}.";
		print "Enjoy your " + this.meat + " and " + this.bread + ", " + who + ".";
	}
}
var baconAndToast = Breakfast("bacon", "toast");
baconAndToast.serve("Dear Reader");

print baconAndToast.init("ham", "bagels");
baconAndToast.serve("ya filthy animal");

class Logger {
	init (type, a, b) {
		this.type = type;
		this.a = a;
		if (type == "string") return;
		this.b = b;
	}

	log() {
		if (this.type == "string") print this.a;
		else print (this.a + this.b);
	}
}
var logger = Logger("string", "I'm a string logger!", nil);
logger.log();

var sumLogger = logger.init("number", 40, 2);
sumLogger.log();

// TODO: inheritance
// class Brunch < Breakfast {
// 	drink() {
// 		print "How about a Bloody Mary?";
// 	}
// }

// TODO: init inheritance
// var benedict = Brunch("ham", "English muffin");
// benedict.serve("Noble Reader");

// TODO: init extension
// class Brunch < Breakfast {
// 	init (meat, bread, drink) {
// 		super.init(meat, bread);
// 		this.drink = drink;
// 	}
// }
