// declaration
class Breakfast {
	cook() {
		print "Eggs a-fryin'!";
	}
	serve(who) {
		print "Enjoy your breakfast, " + who + ".";
	}
}

// first-class status
fn printClass(klass) {
	print klass;
}

var myClass = Breakfast;
printClass(Breakfast);

// constructed by invoking the class
var breakfast = Breakfast();
print breakfast;

// assignment / access
breakfast.meat = "sausage";
breakfast.bread = "sourdough";

// initialization
class Breakfast {
	init (meat, bread) {
		this.meat = meat;
		this.bread = bread;
	}
	serve(who) {
		// TODO: string interpolation?
		// print $"Enjoy your {this.meat} and {this.bread}, {who}.";
		print "Enjoy your " + this.meat + " and " + this.bread + ", " + who + ".";
	}
}
var baconAndToast = Breakfast("bacon", "toast");
baconAndToast.serve("Dear Reader");

// Re-invoking a constructor
print baconAndToast.init("ham", "bagels");
baconAndToast.serve("ya filthy animal");

// inheritance
class Brunch < Breakfast {
	init (meat, bread, drink) {
		super.init(meat, bread);
		this.drink = drink;
	}
	serve(who) {
		super.serve(who);
		print "How about a " + this.drink + " to wash it down?";
	}
}

var benedict = Brunch("ham", "English muffin", "Bloody Mary");
benedict.serve("Noble Reader");
// benedict.drink();
