program     -> declaration* EOF ;

declaration -> fnDecl
             | varDecl
             | statement ;

fnDecl      -> "fn" function ;
function    -> IDENTIFIER "(" parameters? ")" block ;
parameters  -> IDENTIFIER ( "," IDENTIFIER )* ;
varDecl     -> "var" IDENTIFIER ( "=" expression )? ";" ;

statement   -> exprStmt
             | forStmt
             | ifStmt
             | printStmt
             | returnStmt
             | whileStmt
             | block ;

block       -> "{" declaration* "}" ;

exprStmt    -> expression ";" ;
forStmt     -> "for" "("
               ( varDecl | exprStmt | ";" ) expression? ";" expression?
               ")" statement ;
ifStmt      -> "if" "(" expression ")" statement
             ( "else" statement )? ;
printStmt   -> "print" expression ";" ;
returnStmt  -> "return" expression? ";" ;
whileStmt   -> "while" "(" expression ")" statement ;

expression  -> assignment ;
assignment  -> IDENTIFIER "=" assignment
             | logic_or ;
logic_or    -> logic_and ( "or" logic_and )* ;
logic_and   -> equality ( "and" equality )* ;
equality    -> comparison (( '!=' | '==' ) comparison )* ;
comparison  -> term (( '>' | '>=' | '<' | '<=' ) term )* ;
term        -> factor (( '-' | '+' ) factor )* ;
factor      -> unary (( '/' | '*' ) unary )* ;
unary       -> ( '!' | '-' ) unary | call ;
call        -> primary ( "(" arguments? ")" )* ;
arguments   -> expression ( "," expression )* ;
primary     -> 'true' | 'false' | 'nil'
             | NUMBER | STRING
             | '(' expression ')'
             | IDENTIFIER ;

# precedence:
# NAME           OPERATORS    ASSOCIATES
# Equality       == !=        Left
# Comparison     > >= < <=    Left
# Term           - +          Left
# Factor         / *          Left
# Unary          ! -          Right
